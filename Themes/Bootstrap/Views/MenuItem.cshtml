@{
    // odd formatting in this file is to cause more attractive results in the output.
    var items = (IEnumerable<dynamic>)Enumerable.Cast<dynamic>(Model);
}
@{
if (!HasText(Model.Text)) {
    @DisplayChildren(Model)
} else {
    string requestUrl = Request.Path.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    string modelUrl = Model.Href.Replace(Request.ApplicationPath, string.Empty).TrimEnd('/').ToUpperInvariant();
    if ((!string.IsNullOrEmpty(modelUrl) && requestUrl.StartsWith(modelUrl)) || requestUrl == modelUrl) { 
	    Model.Classes.Add("active");
    }
    if (items.Any())
    {
        Model.Classes.Add("dropdown");
    }
    var tag = Tag(Model, "li");
    @tag.StartElement
    if (items.Any()) {
        if (Model.DisplayHref == null || (Model.DisplayHref != null && Model.DisplayHref))
        {
            <a href="@Model.Href" class="dropdown-toggle">@Model.Text<b class="caret"></b></a>
            <ul class="dropdown-menu">
                @DisplayChildren(Model)
            </ul>
        }
        else
        {   
            <a href="#" class="dropdown-toggle">@Model.Text<b class="caret"></b></a>
            <ul class="dropdown-menu">
                @DisplayChildren(Model)
            </ul>
        }
    }
    else
    {
        if (Model.DisplayHref == null || (Model.DisplayHref != null && Model.DisplayHref))
        {
            <a href="@Model.Href">@Model.Text</a>
        }
        else
        {
            <a href="#">@Model.Text</a>
        }
    }
    @tag.EndElement
    }
}