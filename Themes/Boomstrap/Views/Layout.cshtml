@using Orchard.UI.Resources;
@functions {
    // To support the layout classifaction below. Implementing as a razor function because we can, could otherwise be a Func<string[], string, string> in the code block following.
    string CalcuClassify(string[] zoneNames, string classNamePrefix)
    {
        var zoneCounter = 0;
        var zoneNumsFilled = string.Join("", zoneNames.Select(zoneName => { ++zoneCounter; return Model[zoneName] != null ? zoneCounter.ToString() : ""; }).ToArray());
        return HasText(zoneNumsFilled) ? classNamePrefix + zoneNumsFilled : "";
    }
}
@{
    /* Global includes for the theme
    ***************************************************************/

    SetMeta("X-UA-Compatible", "IE=edge,chrome=1");

    Script.Require("jQuery");
    Style.Include("bootstrap.css");
    Style.Include("bootstrapResponsive.css");
    Style.Include("add2home.css");
    Style.Include("site.css");
    
    Script.Include("Site.js");
    Script.Include("ipad.js");
    Script.Include("homepage.js");

    /* Some useful shortcuts or settings
    ***************************************************************/

    Func<dynamic, dynamic> Zone = x => Display(x); // Zone as an alias for Display to help make it obvious when we're displaying zones

    /* Layout classification based on filled zones
    ***************************************************************/

    //Add classes to the wrapper div to toggle aside widget zones on and off
    var asideClass = CalcuClassify(new[] { "AsideFirst", "AsideSecond" }, "aside-"); // for aside-1, aside-2 or aside-12 if any of the aside zones are filled
    if (HasText(asideClass))
    {
        Model.Classes.Add(asideClass);
    }

    //Add classes to the wrapper div to toggle tripel widget zones on and off
    var tripelClass = CalcuClassify(new[] { "TripelFirst", "TripelSecond", "TripelThird" }, "tripel-"); // for tripel-1, triple-2, etc. if any of the tripel zones are filled
    if (HasText(tripelClass))
    {
        Model.Classes.Add(tripelClass);
    }

    //Add classes to the wrapper div to toggle quad widget zones on and off
    var footerQuadClass = CalcuClassify(new[] { "FooterQuadFirst", "FooterQuadSecond", "FooterQuadThird", "FooterQuadFourth" }, "split-"); // for quad-1, quad-2, etc. if any of the quad zones are filled
    if (HasText(footerQuadClass))
    {
        Model.Classes.Add(footerQuadClass);
    }

    /* Inserting some ad hoc shapes
    ***************************************************************/

    WorkContext.Layout.Header.Add(New.Branding(), "1"); // Site name and link to the home page
    //WorkContext.Layout.Footer.Add(New.Copyright(), "5"); // Copyright message
    WorkContext.Layout.Header.Add(New.User(), "8"); // Login and dashboard links
    WorkContext.Layout.Header.Add(New.Search(), "9"); // Search box for header
    
    if (WorkContext.CurrentUser != null)
    {
        if (AuthorizedFor(Orchard.Security.StandardPermissions.AccessAdminPanel))
        {
            WorkContext.Layout.Footer.Add(New.DashboardLink(), "5"); // Dashboard link in footer
        }
    }
    
    /* Last bit of code to prep the layout wrapper
    ***************************************************************/

    Model.Id = "layout-wrapper";
    var tag = Tag(Model, "div"); // using Tag so the layout div gets the classes, id and other attributes added to the Model
    var mainDivClass = string.Empty; // creating a string variable to hold the class name to add if AsideFirst is not null
}
@tag.StartElement
@if (Model.Header != null)
{
<div id="layout-header" class="navbar navbar-fixed-top">
    <div id="header" class="navbar-inner">
        <div class="container"><!-- change all container to container-fluid and row to row-fluid for fluid layout -->
            <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </a>
            <!--@Zone(Model.Header)-->
            <div class="nav-collapse">
                @if (Model.Navigation != null)
                {
                    @Zone(Model.Navigation)
                }
            </div><!--/.nav-collapse -->
        </div>
    </div>
</div>
}
<div id="layout-main" class="container">
    <!-- Main hero unit for a primary marketing message or call to action -->
    @if (Model.Featured != null)
    {
        <div id="layout-featured" class="hero-unit">
            @Zone(Model.Featured)
        </div><!--/.hero-unit -->
    }

    @if (Model.BeforeMain != null)
    {
        <div id="layout-before-main">
            @Zone(Model.Featured)
        </div><!--/div -->
    }
    
    <div class="row-fluid">
        <!-- Create a span of 3 and 9 if there is content in the AsideFirst zone or AsideSecond zone, or 3-6-3 if both, otherwise create a span of 12 -->
        @if (Model.AsideFirst != null && Model.AsideSecond != null)
        {
            mainDivClass = "span4";
        }
        else if (Model.AsideFirst != null || Model.AsideSecond != null)
        {
            mainDivClass = "span8";
        }
        else
        {
            mainDivClass = "span12";
        }

        @if (Model.AsideFirst != null)
        {
            <div class="span4">
                <div id="aside-first" class="well sidebar-nav">
                    @Zone(Model.AsideFirst)
                </div><!--/.well -->
            </div><!--/.span -->
        }
        <!-- Place messages above Content -->
        @if (Model.Messages != null)
        {
            <div id="messages" class="@mainDivClass">
                @Zone(Model.Messages)
            </div><!--/.span -->
        }
        @if (Model.BeforeContent != null)
        {
            <div id="before-content" class="@mainDivClass">
                @Zone(Model.BeforeContent)
            </div><!--/.span -->
        }
        @if (Model.Content != null)
        {
            <div id="content" class="@mainDivClass">
                @Zone(Model.Content)
            </div><!--/.span -->
        }
        @if (Model.AfterContent != null)
        {
            <div id="after-content" class="@mainDivClass">
                @Zone(Model.AfterContent)
            </div><!--/.span -->
        }
        @if (Model.AsideSecond != null)
        {
            <div class="span4">
                <div id="aside-second">
                    @Zone(Model.AsideSecond)
                </div><!--/.well -->
            </div><!--/.span -->
        }
    </div><!--/.row -->

    @if (Model.AfterMain != null)
    {
        <div id="layout-after-main">
            @Zone(Model.AfterMain)
        </div>
    }
    @if (Model.TripelFirst != null || Model.TripelSecond != null || Model.TripelThird != null)
    {
        <div id="layout-tripel" class="row">
            @if (Model.TripelFirst != null)
            {
                <div id="tripel-first" class="span4">
                    @Zone(Model.TripelFirst)
                </div><!--/.span -->
            }
            @if (Model.TripelSecond != null)
            {
                <div id="tripel-second" class="span4">
                    @Zone(Model.TripelSecond)
                </div><!--/.span -->
            }
            @if (Model.TripelThird != null)
            {
                <div id="tripel-third" class="span4">
                    @Zone(Model.TripelThird)
                </div><!--/.span -->
            }
        </div><!--/.row -->
    }

    <hr />

    <footer id="footer">
        @if (Model.Footer != null)
        {
            <div id="footer-sig">
                @Zone(Model.Footer)
            </div>
        }
    </footer>
</div><!--/.container -->
@tag.EndElement